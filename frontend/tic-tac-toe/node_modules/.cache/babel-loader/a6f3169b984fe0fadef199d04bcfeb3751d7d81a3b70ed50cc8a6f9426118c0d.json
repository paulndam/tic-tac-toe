{"ast":null,"code":"var _jsxFileName = \"/Users/paulndam/Documents/Wise-Rock-Tech-Interview/tic-tac-toe/frontend/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport { useEffect, useState } from \"react\";\nimport GameBoard from \"./components/game-board/GameBoard\";\nimport WelcomeModal from \"./components/welcomeModal/WelcomeModal\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:8080\", {\n  path: \"/socket.io\"\n});\nfunction App() {\n  _s();\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerId, setPlayerId] = useState(null);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [gameId, setGameId] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForPlayer, setWaitingForPlayer] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showNotificationMessage, setNotificationMessage] = useState(\"\");\n  const [isPlayerOne, setIsPlayerOne] = useState(false);\n  const [isPlayerTwo, setIsPlayerTwo] = useState(false);\n  const [availableGames, setAvailableGames] = useState([]);\n  const handleStartGame = () => {\n    console.log(\"=== Starting Game ===\");\n    if (!playerName.trim()) {\n      alert(\"Please enter a name.\");\n      return;\n    }\n    console.log(\"=== Starting Game 2===\");\n    if (!playerId) {\n      setIsPlayerOne(true);\n      console.log(\"Creating Player...\");\n      socket.emit(\"createPlayer\", {\n        name: playerName.trim()\n      });\n    }\n  };\n  const handleJoinGameOrRegister = () => {\n    if (!playerName.trim() || gameId && !gameId.trim()) {\n      alert(\"Please enter a name and, if joining a game, a valid game ID.\");\n      return;\n    }\n    if (!playerId) {\n      console.log(gameId ? \"Joining Game as Player Two...\" : \"Creating Player and Game...\");\n      // Assume if gameId is present, we're joining; otherwise, creating a new game.\n      socket.emit(\"createPlayer\", {\n        name: playerName.trim(),\n        gameId: gameId || undefined\n      });\n    }\n  };\n  const handleNameChange = newName => {\n    setPlayerName(newName);\n  };\n  const handleGameIdChange = newGameId => {\n    setGameId(newGameId);\n  };\n  useEffect(() => {\n    const storedPlayerId = localStorage.getItem(\"playerId\");\n    const storedPlayerName = localStorage.getItem(\"playerName\");\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\");\n    const savedBoard = localStorage.getItem('board');\n    if (savedBoard) {\n      setBoard(JSON.parse(savedBoard));\n    }\n    if (storedPlayerId) {\n      setPlayerId(storedPlayerId);\n      setPlayerName(storedPlayerName);\n    }\n    if (storedGameId) {\n      setGameId(storedGameId);\n      setIsPlayerOne(storedIsPlayerOne === \"true\");\n      if (!storedPlayerId) {\n        setIsPlayerOne(false);\n      }\n    }\n    const handlePlayerResponse = res => {\n      console.log(\"response from creating player ===>\", res);\n      if (res.newPlayer) {\n        const {\n          playerId,\n          name\n        } = res.newPlayer;\n        localStorage.setItem(\"playerId\", playerId);\n        localStorage.setItem(\"playerName\", name);\n        setPlayerId(playerId);\n        setPlayerName(name);\n        setIsPlayerTwo(!!gameId);\n        if (isPlayerOne && !gameId) {\n          socket.emit(\"createGame\", {\n            playerId: playerId\n          });\n        }\n      }\n    };\n    const handleGameResponse = res => {\n      console.log(\"response from creating game ===>\", res);\n      if (res.newGame) {\n        const {\n          gameId\n        } = res.newGame;\n        localStorage.setItem(\"gameId\", gameId);\n        localStorage.setItem(\"isPlayerOne\", \"true\");\n        setGameId(gameId);\n        setGameStarted(true);\n        setIsPlayerOne(true);\n      }\n    };\n    const handleGameJoinedResponse = response => {\n      console.log(\"Game join response:\", response);\n      if (response.type === \"gameJoined\") {\n        // Success, a player has joined the game\n        const {\n          updateGame\n        } = response;\n        localStorage.setItem(\"gameId\", updateGame.gameId);\n        setGameId(updateGame.gameId);\n        setGameStarted(true);\n        setWaitingForPlayer(false);\n        setNotificationMessage(\"A player has joined your game. The game has started.\");\n      } else if (response.type === \"error\") {\n        setErrorMessage(response.message);\n      }\n    };\n\n    // Register socket event listeners\n    socket.on(\"playerResponse\", handlePlayerResponse);\n    socket.on(\"gameResponse\", handleGameResponse);\n    socket.on(\"gameJoinedResponse\", handleGameJoinedResponse);\n    socket.on(\"playerResponse\", error => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n    socket.on(\"gameResponse\", error => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n    return () => {\n      socket.off(\"playerResponse\", handlePlayerResponse);\n      socket.off(\"gameResponse\", handleGameResponse);\n      socket.off(\"gameJoinedResponse\", handleGameJoinedResponse);\n    };\n  }, [isPlayerOne, playerId, gameId]);\n  useEffect(() => {\n    localStorage.setItem('board', JSON.stringify(board));\n  }, [board]);\n  const createGame = () => {\n    if (playerId) {\n      socket.emit(\"createGame\", {\n        playerId\n      });\n      setWaitingForPlayer(true);\n    } else {\n      setErrorMessage(\"You must be registered to create a game\");\n    }\n  };\n  const makeMove = position => {\n    socket.emit(\"makeMove\", {\n      playerId,\n      gameId,\n      position\n    });\n  };\n  const handleResetGame = () => {\n    if (!gameId) {\n      console.log(\"No game to reset\");\n      return;\n    }\n    // Emit the resetGame event to the server\n    socket.emit(\"resetGame\", {\n      gameId\n    });\n\n    // Optionally, clear frontend state here or wait for the server's response\n    setBoard(Array(9).fill(null)); // Reset the board state\n    setGameStarted(false);\n    setWaitingForPlayer(false);\n    // Additional UI state resets as necessary\n  };\n  const logOut = () => {\n    localStorage.removeItem(\"playerId\");\n    localStorage.removeItem(\"gameId\");\n    localStorage.removeItem(\"playerName\");\n    setPlayerId(null);\n    setPlayerName(\"\");\n    setGameStarted(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 24\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(WelcomeModal, {\n      playerName: playerName,\n      onNameChange: handleNameChange,\n      onStart: handleStartGame,\n      gameId: gameId,\n      setGameId: handleGameIdChange,\n      isPlayerOne: isPlayerOne,\n      onJoinGame: handleJoinGameOrRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tic-Tac-Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome \", playerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), waitingForPlayer && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Waiting for Player Two to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 30\n      }, this), gameStarted && /*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        onMakeMove: makeMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Game started! Your game ID: \", gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-game-btn\",\n        onClick: handleResetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"log-out-btn\",\n        onClick: logOut,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g8TVsE9XJRQXNoSfV+qc4VthDW8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useEffect","useState","GameBoard","WelcomeModal","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","path","App","_s","playerName","setPlayerName","playerId","setPlayerId","board","setBoard","Array","fill","gameId","setGameId","gameStarted","setGameStarted","waitingForPlayer","setWaitingForPlayer","errorMessage","setErrorMessage","showNotificationMessage","setNotificationMessage","isPlayerOne","setIsPlayerOne","isPlayerTwo","setIsPlayerTwo","availableGames","setAvailableGames","handleStartGame","console","log","trim","alert","emit","name","handleJoinGameOrRegister","undefined","handleNameChange","newName","handleGameIdChange","newGameId","storedPlayerId","localStorage","getItem","storedPlayerName","storedGameId","storedIsPlayerOne","savedBoard","JSON","parse","handlePlayerResponse","res","newPlayer","setItem","handleGameResponse","newGame","handleGameJoinedResponse","response","type","updateGame","message","on","error","off","stringify","createGame","makeMove","position","handleResetGame","logOut","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onNameChange","onStart","onJoinGame","onMakeMove","onClick","_c","$RefreshReg$"],"sources":["/Users/paulndam/Documents/Wise-Rock-Tech-Interview/tic-tac-toe/frontend/tic-tac-toe/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport { useEffect, useState } from \"react\";\nimport GameBoard from \"./components/game-board/GameBoard\";\nimport WelcomeModal from \"./components/welcomeModal/WelcomeModal\";\n\nconst socket = io(\"http://localhost:8080\", {\n  path: \"/socket.io\",\n});\n\nfunction App() {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerId, setPlayerId] = useState(null);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [gameId, setGameId] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForPlayer, setWaitingForPlayer] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showNotificationMessage, setNotificationMessage] = useState(\"\");\n  const [isPlayerOne, setIsPlayerOne] = useState(false);\n  const [isPlayerTwo, setIsPlayerTwo] = useState(false);\n  const [availableGames, setAvailableGames] = useState([]);\n\n  const handleStartGame = () => {\n    console.log(\"=== Starting Game ===\");\n\n    if (!playerName.trim()) {\n      alert(\"Please enter a name.\");\n      return;\n    }\n\n    console.log(\"=== Starting Game 2===\");\n\n    if (!playerId) {\n      setIsPlayerOne(true);\n      console.log(\"Creating Player...\");\n      socket.emit(\"createPlayer\", { name: playerName.trim() });\n    }\n  };\n\n  const handleJoinGameOrRegister = () => {\n    if (!playerName.trim() || (gameId && !gameId.trim())) {\n      alert(\"Please enter a name and, if joining a game, a valid game ID.\");\n      return;\n    }\n  \n    if (!playerId) {\n      console.log(gameId ? \"Joining Game as Player Two...\" : \"Creating Player and Game...\");\n      // Assume if gameId is present, we're joining; otherwise, creating a new game.\n      socket.emit(\"createPlayer\", { name: playerName.trim(), gameId: gameId || undefined });\n    }\n  };\n\n  const handleNameChange = (newName) => {\n    setPlayerName(newName);\n  };\n\n  const handleGameIdChange = (newGameId) => {\n    setGameId(newGameId);\n  };\n\n  useEffect(() => {\n    const storedPlayerId = localStorage.getItem(\"playerId\");\n    const storedPlayerName = localStorage.getItem(\"playerName\");\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\");\n\n    const savedBoard = localStorage.getItem('board');\n  if (savedBoard) {\n    setBoard(JSON.parse(savedBoard));\n  }\n\n    if (storedPlayerId) {\n      setPlayerId(storedPlayerId);\n      setPlayerName(storedPlayerName);\n    }\n\n    if (storedGameId) {\n      setGameId(storedGameId);\n      setIsPlayerOne(storedIsPlayerOne === \"true\");\n      if (!storedPlayerId) {\n        setIsPlayerOne(false); \n      }\n    }\n\n    const handlePlayerResponse = (res) => {\n      console.log(\"response from creating player ===>\", res);\n      if (res.newPlayer) {\n        const { playerId, name } = res.newPlayer;\n        localStorage.setItem(\"playerId\", playerId);\n        localStorage.setItem(\"playerName\", name);\n\n        setPlayerId(playerId);\n        setPlayerName(name);\n        setIsPlayerTwo(!!gameId);\n\n\n        if (isPlayerOne && !gameId) {\n          socket.emit(\"createGame\", { playerId: playerId });\n        }\n      }\n    };\n\n    const handleGameResponse = (res) => {\n      console.log(\"response from creating game ===>\", res);\n      if (res.newGame) {\n        const { gameId } = res.newGame;\n        localStorage.setItem(\"gameId\", gameId);\n        localStorage.setItem(\"isPlayerOne\", \"true\");\n        setGameId(gameId);\n        setGameStarted(true);\n        setIsPlayerOne(true);\n      }\n    };\n\n    const handleGameJoinedResponse = (response) => {\n      console.log(\"Game join response:\", response);\n      if (response.type === \"gameJoined\") {\n        // Success, a player has joined the game\n        const { updateGame } = response;\n        localStorage.setItem(\"gameId\", updateGame.gameId);\n        setGameId(updateGame.gameId);\n        setGameStarted(true);\n        setWaitingForPlayer(false); \n        setNotificationMessage(\"A player has joined your game. The game has started.\");\n      } else if (response.type === \"error\") {\n        setErrorMessage(response.message);\n      }\n    };\n\n    // Register socket event listeners\n    socket.on(\"playerResponse\", handlePlayerResponse);\n    socket.on(\"gameResponse\", handleGameResponse);\n    socket.on(\"gameJoinedResponse\", handleGameJoinedResponse);\n\n    socket.on(\"playerResponse\", (error) => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n\n    socket.on(\"gameResponse\", (error) => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n\n    return () => {\n      socket.off(\"playerResponse\", handlePlayerResponse);\n      socket.off(\"gameResponse\", handleGameResponse);\n      socket.off(\"gameJoinedResponse\",handleGameJoinedResponse)\n    };\n  }, [isPlayerOne, playerId,gameId]); \n\n  useEffect(() => {\n    localStorage.setItem('board', JSON.stringify(board));\n  }, [board]);\n\n\n\n  const createGame = () => {\n    if (playerId) {\n      socket.emit(\"createGame\", { playerId });\n      setWaitingForPlayer(true);\n    } else {\n      setErrorMessage(\"You must be registered to create a game\");\n    }\n  };\n\n  const makeMove = (position) => {\n    socket.emit(\"makeMove\", { playerId, gameId, position });\n  };\n\n\n  const handleResetGame = () => {\n    if (!gameId) {\n      console.log(\"No game to reset\");\n      return;\n    }\n    // Emit the resetGame event to the server\n    socket.emit(\"resetGame\", { gameId });\n  \n    // Optionally, clear frontend state here or wait for the server's response\n    setBoard(Array(9).fill(null)); // Reset the board state\n    setGameStarted(false);\n    setWaitingForPlayer(false);\n    // Additional UI state resets as necessary\n  };\n  \n\n  const logOut = () => {\n    localStorage.removeItem(\"playerId\");\n    localStorage.removeItem(\"gameId\");\n    localStorage.removeItem(\"playerName\");\n\n    setPlayerId(null);\n    setPlayerName(\"\");\n    setGameStarted(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n\n      {!gameStarted ? (\n        <WelcomeModal\n          playerName={playerName}\n          onNameChange={handleNameChange}\n          onStart={handleStartGame}\n          gameId={gameId}\n          setGameId={handleGameIdChange}\n          isPlayerOne={isPlayerOne}\n          onJoinGame={handleJoinGameOrRegister}\n        />\n      ) : (\n        <>\n        <div className=\"header\">\n          <h1>Tic-Tac-Toe</h1>\n          <h2>Welcome {playerName}</h2>\n        </div>\n\n        {waitingForPlayer && <div>Waiting for Player Two to join...</div>}\n        {gameStarted && <GameBoard board={board} onMakeMove={makeMove} />}\n        {gameStarted && <div>Game started! Your game ID: {gameId}</div>}\n        <button className=\"reset-game-btn\" onClick={handleResetGame}>Reset Game</button>\n\n        <button className=\"log-out-btn\" onClick={logOut}>Log Out</button>\n      </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
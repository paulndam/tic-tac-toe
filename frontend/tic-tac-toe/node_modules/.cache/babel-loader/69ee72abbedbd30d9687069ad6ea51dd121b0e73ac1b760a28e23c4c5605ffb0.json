{"ast":null,"code":"var _jsxFileName = \"/Users/paulndam/Documents/Wise-Rock-Tech-Interview/tic-tac-toe/frontend/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport { useEffect, useState } from \"react\";\nimport GameBoard from \"./components/game-board/GameBoard\";\nimport WelcomeModal from \"./components/welcomeModal/WelcomeModal\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:8080\", {\n  path: \"/socket.io\"\n});\nfunction App() {\n  _s();\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerId, setPlayerId] = useState(null);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [gameId, setGameId] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForPlayer, setWaitingForPlayer] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showNotificationMessage, setNotificationMessage] = useState(\"\");\n  const [isPlayerOne, setIsPlayerOne] = useState(false);\n  const [availableGames, setAvailableGames] = useState([]);\n  const handleNameChange = name => {\n    setPlayerName(name);\n  };\n\n  // const handleStartGame = () => {\n  //   if (!playerName.trim()) {\n  //     alert(\"Please enter a name.\");\n  //     return\n\n  //   } \n\n  //   if(!playerId){\n  //     socket.emit(\"createPlayer\", {\n  //       name: playerName.trim(),\n  //     });\n  //     setIsPlayerOne(true);\n  //   }else if(!gameId){\n  //     setIsPlayerOne(true);\n  //     socket.emit('createGame', { playerId });\n  //   }\n  // };\n\n  // const logOut = () => {\n  //   localStorage.removeItem(\"playerId\");\n  //   setPlayerId(null);\n  // };\n\n  // useEffect(() => {\n  //   const storedPlayerId = localStorage.getItem(\"playerId\");\n  //   const storedPlayerName = localStorage.getItem(\"playerName\");\n  //   const storedGameId = localStorage.getItem(\"gameId\");\n  //   const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\")\n\n  //   if (storedPlayerId) {\n  //     setPlayerId(storedPlayerId);\n  //     setPlayerName(storedPlayerName);\n  //   }\n\n  //   if (storedGameId) {\n  //     setGameId(storedGameId);\n  //     setIsPlayerOne(storedIsPlayerOne === 'true');\n  //     // setGameStarted(true);  \n  //     // If there is a stored game ID but no stored player ID, the player might have joined a game without registering\n  //     if (!storedPlayerId) {\n  //       setIsPlayerOne(false); // Ensure this user is considered as joining a game, not creating one\n  //     }\n  //   }\n\n  //   socket.on(\"playerCreated\", (res) => {\n  //     if(res.newPlayer){\n  //       const {playerId,name} = res.newPlayer\n  //       localStorage.setItem(\"playerId\",playerId)\n  //       localStorage.setItem(\"name\",name)\n  //       setPlayerId(playerId);\n  //       setPlayerName(name)\n\n  //       if(isPlayerOne){\n  //         socket.emit(\"createGame\",{playerId})\n  //       }\n  //     }\n  //   })\n\n  //   socket.on(\"gameCreated\", (res) => {\n  //     if (res.newGame) {\n  //       const { gameId } = res.newGame;\n  //       localStorage.setItem(\"gameId\", gameId);\n  //       localStorage.setItem(\"isPlayerOne\", 'true');\n  //       setGameId(gameId);\n  //       setGameStarted(true); \n  //       setIsPlayerOne(true);\n  //     }\n  //   });\n\n  //   socket.on(\"playerResponse\", (res) => {\n  //     console.log(\"response from socket ====>\", res);\n  //     if (res.newPlayer) {\n  //       localStorage.setItem(\"playerId\", res.newPlayer.playerId);\n  //       localStorage.setItem(\"playerName\", res.newPlayer.name);\n  //       setPlayerId(res.newPlayer.playerId);\n  //       setPlayerName(res.newPlayer.name);\n  //       // setIsPlayerOne(true)\n  //     }\n  //   });\n\n  //   socket.on(\"allGames\",(games) => {\n  //     console.log(\"=== response listing all games =====>\",games)\n  //     setAvailableGames(games)\n  //   })\n\n  //   socket.on(\"gameJoined\", (res) => {\n  //     console.log(\"==== response joining game ======\",res)\n  //     if (!isPlayerOne) {\n  //       localStorage.setItem(\"gameId\", res.updateGame.gameId); // Assuming 'res' has gameId\n  //       localStorage.setItem(\"isPlayerOne\", 'false');\n  //     }\n  //     setGameStarted(true);\n  //     setWaitingForPlayer(false);\n  //     setNotificationMessage(\"Player Two has joined the game\");\n  //   });\n\n  //   socket.on(\"gameUpdate\", (game) => {\n  //     setBoard(game.board);\n  //     //TO DO: Handle other game updates like current turn, game status, etc.\n  //   });\n\n  //   socket.on(\"playerResponse\", (error) => {\n  //     if (error.type === \"error\") {\n  //       setErrorMessage(error.message);\n  //     }\n  //   });\n\n  //   socket.on(\"gameResponse\", (error) => {\n  //     if (error.type === \"error\") {\n  //       setErrorMessage(error.message);\n  //     }\n  //   });\n\n  //   return () => {\n  //     socket.off(\"playerResponse\");\n  //     socket.off(\"gameCreated\");\n  //     socket.off(\"gameJoined\");\n  //     socket.off(\"gameUpdate\");\n  //   };\n  // }, [playerId,gameId,isPlayerOne,playerName]);\n\n  // const createGame = () => {\n  //   if (playerId) {\n  //     socket.emit(\"createGame\", { playerId });\n  //     setWaitingForPlayer(true);\n  //   } else {\n  //     setErrorMessage(\"You must be registered to create a game\");\n  //   }\n  // };\n\n  // const createPlayerAndJoinGame = () => {\n  //   if (playerName.trim() && gameId.trim()) {\n  //     if(!playerId){\n  //       socket.emit(\"createPlayer\", { name: playerName.trim() });\n  //     }else{\n  //       socket.emit(\"joinGame\", {gameId,playerId });\n  //     }\n  //     // socket.emit(\"joinGame\", { playerId,gameId });\n  //     // setIsPlayerOne(false);\n  //   } else {\n\n  //     setErrorMessage(\"Please enter your name and a valid game ID to join.\");\n  //   }\n  // };\n\n  useEffect(() => {\n    const storedPlayerId = localStorage.getItem(\"playerId\");\n    const storedPlayerName = localStorage.getItem(\"playerName\");\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\");\n    if (storedPlayerId) {\n      setPlayerId(storedPlayerId);\n      setPlayerName(storedPlayerName);\n    }\n    if (storedGameId) {\n      setGameId(storedGameId);\n      setIsPlayerOne(storedIsPlayerOne === 'true');\n      // setGameStarted(true);  \n      // If there is a stored game ID but no stored player ID, the player might have joined a game without registering\n      if (!storedPlayerId) {\n        setIsPlayerOne(false); // Ensure this user is considered as joining a game, not creating one\n      }\n    }\n    socket.on(\"gameCreated\", res => {\n      console.log(\"creating game response ====>\", res);\n      const {\n        gameId\n      } = res.newGame;\n      localStorage.setItem(\"gameId\", gameId);\n      setGameId(gameId);\n      setGameStarted(true);\n      setWaitingForPlayer(true);\n    });\n    socket.on(\"playerCreated\", res => {\n      console.log(\"create player ===>\", res);\n      const {\n        playerId,\n        name\n      } = res.newPlayer;\n      localStorage.setItem(\"playerId\", playerId);\n      localStorage.setItem(\"playerName\", name);\n      setPlayerId(playerId);\n      setPlayerName(name);\n    });\n    socket.on(\"gameJoined\", res => {\n      setWaitingForPlayer(false);\n      // Add any additional logic for handling game join\n    });\n\n    // Ensure to clean up this effect on component unmount\n    return () => {\n      socket.off(\"gameCreated\");\n      socket.off(\"playerCreated\");\n      socket.off(\"gameJoined\");\n    };\n  }, []);\n  const handleStartGame = () => {\n    if (!playerName.trim()) {\n      alert(\"Please enter a name.\");\n      return;\n    }\n    socket.emit(\"createPlayer\", {\n      name: playerName.trim()\n    }, response => {\n      // Check if the player was successfully created\n      if (response.newPlayer) {\n        console.log(\"Player created:\", response.newPlayer);\n        const {\n          playerId,\n          name\n        } = response.newPlayer;\n\n        // Update local state and storage\n        localStorage.setItem(\"playerId\", playerId);\n        localStorage.setItem(\"playerName\", name);\n        setPlayerId(playerId);\n        setPlayerName(name);\n        setIsPlayerOne(true);\n\n        // Now, emit createGame since the player is successfully created\n        socket.emit(\"createGame\", {\n          playerId\n        }, gameResponse => {\n          if (gameResponse.newGame) {\n            const {\n              gameId\n            } = gameResponse.newGame;\n            localStorage.setItem(\"gameId\", gameId);\n            setGameId(gameId);\n            setGameStarted(true);\n            setWaitingForPlayer(true);\n          } else {\n            // Handle error in game creation\n            console.error(\"Failed to create game:\", gameResponse.error);\n          }\n        });\n      } else {\n        // Handle player creation failure\n        console.error(\"Failed to create player:\", response.error);\n      }\n    });\n  };\n\n  // Function to join an existing game\n  const joinGame = gameId => {\n    if (!playerId) {\n      alert(\"Please create a player first.\");\n      return;\n    }\n    socket.emit(\"joinGame\", {\n      gameId,\n      playerId\n    });\n  };\n\n  // Example: Log Out Functionality (Reset Everything)\n  const logOut = () => {\n    localStorage.removeItem(\"playerId\");\n    localStorage.removeItem(\"gameId\");\n    setPlayerId(\"\");\n    setGameId(\"\");\n    setGameStarted(false);\n    setIsPlayerOne(false);\n  };\n  const makeMove = position => {\n    socket.emit(\"makeMove\", {\n      playerId,\n      gameId,\n      position\n    });\n  };\n  console.log(\"===== is player one =======>\", isPlayerOne);\n\n  // return (\n  //   <div className=\"App\">\n  //     {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n\n  //     {!gameStarted ? (\n  //       <WelcomeModal\n  //         playerName={playerName}\n  //         onNameChange={handleNameChange}\n  //         onStart={handleStartGame}\n  //         // onStart={isPlayerOne ? handleStartGame : createPlayerAndJoinGame}\n  //         gameId={gameId}\n  //         setGameId={setGameId} // for updating gameId in WelcomeModal\n  //         isPlayerOne={isPlayerOne}\n  //         availableGames={availableGames}\n  //       />\n  //     ) : (\n  //       <>\n  //         <div className=\"header\">\n  //           <h1>Tic-Tac-Toe</h1>\n  //           <h2>Welcome {playerName}</h2>\n  //         </div>\n\n  //         {waitingForPlayer && <div>Waiting for Player Two to join...</div>}\n\n  //         {gameStarted && <GameBoard board={board} onMakeMove={makeMove} />}\n\n  //         {gameStarted && <div>Game started! Your game ID: {gameId}</div>}\n\n  //         {!gameStarted && isPlayerOne && (\n  //           <>\n  //             <button onClick={createGame}>Create Game</button>\n  //             {gameId && <div>Share game ID with Player Two: {gameId}</div>}\n  //           </>\n  //         )}\n\n  //         {!gameStarted && !isPlayerOne && (\n  //           <>\n  //             <input\n  //               type=\"text\"\n  //               value={gameId}\n  //               onChange={(e) => setGameId(e.target.value)}\n  //               placeholder=\"enter your name\"\n  //             />\n  //             <button onClick={createPlayerAndJoinGame}>Join Game1</button>\n  //           </>\n  //         )}\n\n  //         <button className=\"log-out-btn\" onClick={logOut}>\n  //           Log Out\n  //         </button>\n  //       </>\n  //     )}\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 24\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(WelcomeModal, {\n      playerName: playerName,\n      onNameChange: handleNameChange,\n      onStart: handleStartGame,\n      gameId: gameId,\n      setGameId: setGameId,\n      isPlayerOne: isPlayerOne\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tic-Tac-Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome \", playerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this), waitingForPlayer && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Waiting for Player Two to join...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Game ID: \", gameId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n          board: board,\n          onMakeMove: position => console.log(position)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logOut,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"u6EHPVgw8P0HRPTXCCEJgxq6bXE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useEffect","useState","GameBoard","WelcomeModal","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","path","App","_s","playerName","setPlayerName","playerId","setPlayerId","board","setBoard","Array","fill","gameId","setGameId","gameStarted","setGameStarted","waitingForPlayer","setWaitingForPlayer","errorMessage","setErrorMessage","showNotificationMessage","setNotificationMessage","isPlayerOne","setIsPlayerOne","availableGames","setAvailableGames","handleNameChange","name","storedPlayerId","localStorage","getItem","storedPlayerName","storedGameId","storedIsPlayerOne","on","res","console","log","newGame","setItem","newPlayer","off","handleStartGame","trim","alert","emit","response","gameResponse","error","joinGame","logOut","removeItem","makeMove","position","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onNameChange","onStart","onMakeMove","onClick","_c","$RefreshReg$"],"sources":["/Users/paulndam/Documents/Wise-Rock-Tech-Interview/tic-tac-toe/frontend/tic-tac-toe/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport { useEffect, useState } from \"react\";\nimport GameBoard from \"./components/game-board/GameBoard\";\nimport WelcomeModal from \"./components/welcomeModal/WelcomeModal\";\n\nconst socket = io(\"http://localhost:8080\", {\n  path: \"/socket.io\",\n});\n\nfunction App() {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerId, setPlayerId] = useState(null);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [gameId, setGameId] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForPlayer, setWaitingForPlayer] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showNotificationMessage, setNotificationMessage] = useState(\"\");\n  const [isPlayerOne, setIsPlayerOne] = useState(false);\n  const [availableGames,setAvailableGames] = useState([]);\n\n\n  const handleNameChange = (name) => {\n    setPlayerName(name);\n  };\n\n  // const handleStartGame = () => {\n  //   if (!playerName.trim()) {\n  //     alert(\"Please enter a name.\");\n  //     return\n      \n  //   } \n\n  //   if(!playerId){\n  //     socket.emit(\"createPlayer\", {\n  //       name: playerName.trim(),\n  //     });\n  //     setIsPlayerOne(true);\n  //   }else if(!gameId){\n  //     setIsPlayerOne(true);\n  //     socket.emit('createGame', { playerId });\n  //   }\n  // };\n\n  // const logOut = () => {\n  //   localStorage.removeItem(\"playerId\");\n  //   setPlayerId(null);\n  // };\n\n\n  // useEffect(() => {\n  //   const storedPlayerId = localStorage.getItem(\"playerId\");\n  //   const storedPlayerName = localStorage.getItem(\"playerName\");\n  //   const storedGameId = localStorage.getItem(\"gameId\");\n  //   const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\")\n\n    \n\n  //   if (storedPlayerId) {\n  //     setPlayerId(storedPlayerId);\n  //     setPlayerName(storedPlayerName);\n  //   }\n\n  //   if (storedGameId) {\n  //     setGameId(storedGameId);\n  //     setIsPlayerOne(storedIsPlayerOne === 'true');\n  //     // setGameStarted(true);  \n  //     // If there is a stored game ID but no stored player ID, the player might have joined a game without registering\n  //     if (!storedPlayerId) {\n  //       setIsPlayerOne(false); // Ensure this user is considered as joining a game, not creating one\n  //     }\n  //   }\n\n  //   socket.on(\"playerCreated\", (res) => {\n  //     if(res.newPlayer){\n  //       const {playerId,name} = res.newPlayer\n  //       localStorage.setItem(\"playerId\",playerId)\n  //       localStorage.setItem(\"name\",name)\n  //       setPlayerId(playerId);\n  //       setPlayerName(name)\n\n  //       if(isPlayerOne){\n  //         socket.emit(\"createGame\",{playerId})\n  //       }\n  //     }\n  //   })\n\n  //   socket.on(\"gameCreated\", (res) => {\n  //     if (res.newGame) {\n  //       const { gameId } = res.newGame;\n  //       localStorage.setItem(\"gameId\", gameId);\n  //       localStorage.setItem(\"isPlayerOne\", 'true');\n  //       setGameId(gameId);\n  //       setGameStarted(true); \n  //       setIsPlayerOne(true);\n  //     }\n  //   });\n\n  //   socket.on(\"playerResponse\", (res) => {\n  //     console.log(\"response from socket ====>\", res);\n  //     if (res.newPlayer) {\n  //       localStorage.setItem(\"playerId\", res.newPlayer.playerId);\n  //       localStorage.setItem(\"playerName\", res.newPlayer.name);\n  //       setPlayerId(res.newPlayer.playerId);\n  //       setPlayerName(res.newPlayer.name);\n  //       // setIsPlayerOne(true)\n  //     }\n  //   });\n\n  //   socket.on(\"allGames\",(games) => {\n  //     console.log(\"=== response listing all games =====>\",games)\n  //     setAvailableGames(games)\n  //   })\n\n\n  //   socket.on(\"gameJoined\", (res) => {\n  //     console.log(\"==== response joining game ======\",res)\n  //     if (!isPlayerOne) {\n  //       localStorage.setItem(\"gameId\", res.updateGame.gameId); // Assuming 'res' has gameId\n  //       localStorage.setItem(\"isPlayerOne\", 'false');\n  //     }\n  //     setGameStarted(true);\n  //     setWaitingForPlayer(false);\n  //     setNotificationMessage(\"Player Two has joined the game\");\n  //   });\n\n  //   socket.on(\"gameUpdate\", (game) => {\n  //     setBoard(game.board);\n  //     //TO DO: Handle other game updates like current turn, game status, etc.\n  //   });\n\n  //   socket.on(\"playerResponse\", (error) => {\n  //     if (error.type === \"error\") {\n  //       setErrorMessage(error.message);\n  //     }\n  //   });\n\n  //   socket.on(\"gameResponse\", (error) => {\n  //     if (error.type === \"error\") {\n  //       setErrorMessage(error.message);\n  //     }\n  //   });\n\n  //   return () => {\n  //     socket.off(\"playerResponse\");\n  //     socket.off(\"gameCreated\");\n  //     socket.off(\"gameJoined\");\n  //     socket.off(\"gameUpdate\");\n  //   };\n  // }, [playerId,gameId,isPlayerOne,playerName]);\n\n  \n\n  // const createGame = () => {\n  //   if (playerId) {\n  //     socket.emit(\"createGame\", { playerId });\n  //     setWaitingForPlayer(true);\n  //   } else {\n  //     setErrorMessage(\"You must be registered to create a game\");\n  //   }\n  // };\n\n  // const createPlayerAndJoinGame = () => {\n  //   if (playerName.trim() && gameId.trim()) {\n  //     if(!playerId){\n  //       socket.emit(\"createPlayer\", { name: playerName.trim() });\n  //     }else{\n  //       socket.emit(\"joinGame\", {gameId,playerId });\n  //     }\n  //     // socket.emit(\"joinGame\", { playerId,gameId });\n  //     // setIsPlayerOne(false);\n  //   } else {\n      \n  //     setErrorMessage(\"Please enter your name and a valid game ID to join.\");\n  //   }\n  // };\n\n  useEffect(() => {\n\n      const storedPlayerId = localStorage.getItem(\"playerId\");\n    const storedPlayerName = localStorage.getItem(\"playerName\");\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\")\n\n    \n\n    if (storedPlayerId) {\n      setPlayerId(storedPlayerId);\n      setPlayerName(storedPlayerName);\n    }\n\n    if (storedGameId) {\n      setGameId(storedGameId);\n      setIsPlayerOne(storedIsPlayerOne === 'true');\n      // setGameStarted(true);  \n      // If there is a stored game ID but no stored player ID, the player might have joined a game without registering\n      if (!storedPlayerId) {\n        setIsPlayerOne(false); // Ensure this user is considered as joining a game, not creating one\n      }\n    }\n\n\n    socket.on(\"gameCreated\", (res) => {\n      console.log(\"creating game response ====>\",res)\n      const { gameId } = res.newGame;\n      localStorage.setItem(\"gameId\", gameId);\n      setGameId(gameId);\n      setGameStarted(true);\n      setWaitingForPlayer(true);\n    });\n\n    socket.on(\"playerCreated\", (res) => {\n      console.log(\"create player ===>\",res)\n      const { playerId, name } = res.newPlayer;\n      localStorage.setItem(\"playerId\", playerId);\n      localStorage.setItem(\"playerName\",name)\n      setPlayerId(playerId);\n      setPlayerName(name);\n    });\n\n    socket.on(\"gameJoined\", (res) => {\n      setWaitingForPlayer(false);\n      // Add any additional logic for handling game join\n    });\n\n    // Ensure to clean up this effect on component unmount\n    return () => {\n      socket.off(\"gameCreated\");\n      socket.off(\"playerCreated\");\n      socket.off(\"gameJoined\");\n    };\n  }, []);\n\n  const handleStartGame = () => {\n    if (!playerName.trim()) {\n      alert(\"Please enter a name.\");\n      return;\n    }\n\n    socket.emit(\"createPlayer\", { name: playerName.trim() }, (response) => {\n      // Check if the player was successfully created\n      if (response.newPlayer) {\n        console.log(\"Player created:\", response.newPlayer);\n        const { playerId, name } = response.newPlayer;\n\n        // Update local state and storage\n        localStorage.setItem(\"playerId\", playerId);\n        localStorage.setItem(\"playerName\", name);\n        setPlayerId(playerId);\n        setPlayerName(name);\n        setIsPlayerOne(true);\n\n        // Now, emit createGame since the player is successfully created\n        socket.emit(\"createGame\", { playerId }, (gameResponse) => {\n          if (gameResponse.newGame) {\n            const { gameId } = gameResponse.newGame;\n            localStorage.setItem(\"gameId\", gameId);\n            setGameId(gameId);\n            setGameStarted(true);\n            setWaitingForPlayer(true);\n          } else {\n            // Handle error in game creation\n            console.error(\"Failed to create game:\", gameResponse.error);\n          }\n        });\n      } else {\n        // Handle player creation failure\n        console.error(\"Failed to create player:\", response.error);\n      }\n    });\n};\n\n\n  // Function to join an existing game\n  const joinGame = (gameId) => {\n    if (!playerId) {\n      alert(\"Please create a player first.\");\n      return;\n    }\n    socket.emit(\"joinGame\", { gameId, playerId });\n  };\n\n  // Example: Log Out Functionality (Reset Everything)\n  const logOut = () => {\n    localStorage.removeItem(\"playerId\");\n    localStorage.removeItem(\"gameId\");\n    setPlayerId(\"\");\n    setGameId(\"\");\n    setGameStarted(false);\n    setIsPlayerOne(false);\n  };\n\n  const makeMove = (position) => {\n    socket.emit(\"makeMove\", { playerId, gameId, position });\n  };\n\n  console.log(\"===== is player one =======>\",isPlayerOne)\n\n  // return (\n  //   <div className=\"App\">\n  //     {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n\n  //     {!gameStarted ? (\n  //       <WelcomeModal\n  //         playerName={playerName}\n  //         onNameChange={handleNameChange}\n  //         onStart={handleStartGame}\n  //         // onStart={isPlayerOne ? handleStartGame : createPlayerAndJoinGame}\n  //         gameId={gameId}\n  //         setGameId={setGameId} // for updating gameId in WelcomeModal\n  //         isPlayerOne={isPlayerOne}\n  //         availableGames={availableGames}\n  //       />\n  //     ) : (\n  //       <>\n  //         <div className=\"header\">\n  //           <h1>Tic-Tac-Toe</h1>\n  //           <h2>Welcome {playerName}</h2>\n  //         </div>\n\n  //         {waitingForPlayer && <div>Waiting for Player Two to join...</div>}\n\n  //         {gameStarted && <GameBoard board={board} onMakeMove={makeMove} />}\n\n  //         {gameStarted && <div>Game started! Your game ID: {gameId}</div>}\n\n  //         {!gameStarted && isPlayerOne && (\n  //           <>\n  //             <button onClick={createGame}>Create Game</button>\n  //             {gameId && <div>Share game ID with Player Two: {gameId}</div>}\n  //           </>\n  //         )}\n\n  //         {!gameStarted && !isPlayerOne && (\n  //           <>\n  //             <input\n  //               type=\"text\"\n  //               value={gameId}\n  //               onChange={(e) => setGameId(e.target.value)}\n  //               placeholder=\"enter your name\"\n  //             />\n  //             <button onClick={createPlayerAndJoinGame}>Join Game1</button>\n  //           </>\n  //         )}\n\n  //         <button className=\"log-out-btn\" onClick={logOut}>\n  //           Log Out\n  //         </button>\n  //       </>\n  //     )}\n  //   </div>\n  // );\n  return (\n    <div className=\"App\">\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n\n      {!gameStarted ? (\n        <WelcomeModal\n          playerName={playerName}\n          onNameChange={handleNameChange}\n          onStart={handleStartGame}\n          gameId={gameId}\n          setGameId={setGameId}\n          isPlayerOne={isPlayerOne}\n        />\n      ) : (\n        <>\n          <div className=\"header\">\n            <h1>Tic-Tac-Toe</h1>\n            <h2>Welcome {playerName}</h2>\n            {waitingForPlayer && <div>Waiting for Player Two to join...</div>}\n            <div>Game ID: {gameId}</div>\n            <GameBoard board={board} onMakeMove={(position) => console.log(position)} />\n          </div>\n\n          <button onClick={logOut}>Log Out</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,YAAY,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElE,MAAMC,MAAM,GAAGT,EAAE,CAAC,uBAAuB,EAAE;EACzCU,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAACiB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACuB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC2B,uBAAuB,EAAEC,sBAAsB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACtE,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC+B,cAAc,EAACC,iBAAiB,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAGvD,MAAMiC,gBAAgB,GAAIC,IAAI,IAAK;IACjCtB,aAAa,CAACsB,IAAI,CAAC;EACrB,CAAC;;EAED;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEAnC,SAAS,CAAC,MAAM;IAEZ,MAAMoC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACzD,MAAMC,gBAAgB,GAAGF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC3D,MAAME,YAAY,GAAGH,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnD,MAAMG,iBAAiB,GAAGJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAI7D,IAAIF,cAAc,EAAE;MAClBrB,WAAW,CAACqB,cAAc,CAAC;MAC3BvB,aAAa,CAAC0B,gBAAgB,CAAC;IACjC;IAEA,IAAIC,YAAY,EAAE;MAChBnB,SAAS,CAACmB,YAAY,CAAC;MACvBT,cAAc,CAACU,iBAAiB,KAAK,MAAM,CAAC;MAC5C;MACA;MACA,IAAI,CAACL,cAAc,EAAE;QACnBL,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;MACzB;IACF;IAGAvB,MAAM,CAACkC,EAAE,CAAC,aAAa,EAAGC,GAAG,IAAK;MAChCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAACF,GAAG,CAAC;MAC/C,MAAM;QAAEvB;MAAO,CAAC,GAAGuB,GAAG,CAACG,OAAO;MAC9B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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
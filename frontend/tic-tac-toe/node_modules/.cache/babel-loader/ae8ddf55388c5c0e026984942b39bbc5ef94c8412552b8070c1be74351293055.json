{"ast":null,"code":"var _jsxFileName = \"/Users/paulndam/Documents/Wise-Rock-Tech-Interview/tic-tac-toe/frontend/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport { useEffect, useState } from \"react\";\nimport GameBoard from \"./components/game-board/GameBoard\";\nimport WelcomeModal from \"./components/welcomeModal/WelcomeModal\";\nimport { GameStatus } from \"./components/utils/gameStatus\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:8080\", {\n  path: \"/socket.io\"\n});\nfunction App() {\n  _s();\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerId, setPlayerId] = useState(null);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [gameId, setGameId] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForPlayer, setWaitingForPlayer] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showNotificationMessage, setNotificationMessage] = useState(\"\");\n  const [isPlayerOne, setIsPlayerOne] = useState(false);\n  const [isPlayerTwo, setIsPlayerTwo] = useState(false);\n  const [availableGames, setAvailableGames] = useState([]);\n  const [sessionID, setSessionID] = useState(null);\n  useEffect(() => {\n    // Attempt to restore session on component mount\n    const session = sessionStorage.getItem(\"sessionID\");\n    if (session) {\n      socket.emit(\"validateSession\", {\n        sessionID: session\n      }, response => {\n        if (response.valid) {\n          setSessionID(session);\n          updateGameStateFromResponse(response);\n        } else {\n          sessionStorage.removeItem(\"sessionID\");\n          setSessionID(null);\n        }\n      });\n    }\n  }, []);\n  const updateGameStateFromResponse = response => {\n    // Consolidated game state update logic\n    setPlayerId(response.playerId);\n    setPlayerName(response.playerName);\n    setGameId(response.gameId);\n    setBoard(response.board);\n    setIsPlayerOne(response.isPlayerOne);\n    setGameStarted(response.gameStarted);\n    setIsPlayerTwo(response.isPlayerTwo);\n    // Additional updates as necessary...\n  };\n  const handleStartGame = () => {\n    if (!playerName.trim()) {\n      alert(\"Please enter a name.\");\n      return;\n    }\n    if (!playerId) {\n      setIsPlayerOne(true);\n      console.log(\"Creating Player...\");\n      // socket.emit(\"createPlayer\", { name: playerName.trim() });\n      // setWaitingForPlayer(true);\n      socket.emit(\"createPlayer\", {\n        name: playerName.trim()\n      }, response => {\n        if (response.sessionID) {\n          sessionStorage.setItem(\"sessionID\", response.sessionID);\n          setSessionID(response.sessionID);\n          updateGameStateFromResponse(response);\n          setWaitingForPlayer(true);\n        }\n        // Handle error or invalid response case...\n      });\n    }\n  };\n  const handleJoinGameOrRegister = () => {\n    if (!playerName.trim() || gameId && !gameId.trim()) {\n      alert(\"Please enter a name and, if joining a game, a valid game ID.\");\n      return;\n    }\n    if (!playerId) {\n      console.log(gameId ? \"Joining Game as Player Two...\" : \"Creating Player and Game...\");\n      // socket.emit(\"createPlayer\", {\n      //   name: playerName.trim(),\n      //   gameId: gameId || undefined,\n      // });\n      socket.emit(\"createPlayer\", {\n        name: playerName.trim(),\n        gameId: gameId || undefined\n      }, response => {\n        if (response.sessionID) {\n          sessionStorage.setItem(\"sessionID\", response.sessionID);\n          setSessionID(response.sessionID);\n          updateGameStateFromResponse(response);\n        }\n        // Handle error or invalid response case...\n      });\n    }\n  };\n  const handleNameChange = newName => {\n    setPlayerName(newName);\n  };\n  const handleGameIdChange = newGameId => {\n    setGameId(newGameId);\n  };\n  useEffect(() => {\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\") === \"true\";\n    const storedGameStarted = localStorage.getItem(\"gameStarted\") === \"true\";\n    if (storedGameId) {\n      socket.emit(\"requestGameState\", {\n        gameId: storedGameId\n      });\n    } else {\n      setGameStarted(storedGameStarted && storedIsPlayerOne);\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   const storedPlayerId = localStorage.getItem(\"playerId\");\n  //   const storedGameId = localStorage.getItem(\"gameId\");\n\n  //   // Only set isPlayerOne or gameStarted based on explicit server validation\n  //   if (storedGameId && storedPlayerId) {\n  //     // Request current game state from the server to validate\n  //     socket.emit(\"requestGameState\", { gameId: storedGameId });\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    const session = sessionStorage.getItem(\"sessionID\");\n    if (session) {\n      setSessionID(session);\n      // Validate session with the server to restore state\n      socket.emit(\"validateSession\", {\n        sessionID: session\n      }, response => {\n        if (response.valid) {\n          // Assume response includes all necessary state information\n          setPlayerId(response.playerId);\n          setPlayerName(response.playerName);\n          setGameId(response.gameId);\n          setBoard(response.board);\n          setIsPlayerOne(response.isPlayerOne);\n          setGameStarted(response.gameStarted);\n          // handle other necessary state updates based on the response\n        } else {\n          // Handle invalid session scenario\n          sessionStorage.removeItem(\"sessionID\"); // Clear invalid session\n          setSessionID(null); // Reset session state\n          // Potentially navigate user to a start or join game screen\n        }\n      });\n    }\n  }, [socket]);\n  useEffect(() => {\n    const storedPlayerId = localStorage.getItem(\"playerId\");\n    const storedPlayerName = localStorage.getItem(\"playerName\");\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\");\n    const storedGameStarted = localStorage.getItem(\"gameStarted\");\n    const savedBoard = localStorage.getItem(\"board\");\n    if (savedBoard) {\n      setBoard(JSON.parse(savedBoard));\n    }\n    if (storedPlayerId && storedPlayerName) {\n      setPlayerId(storedPlayerId);\n      setPlayerName(storedPlayerName);\n      setIsPlayerTwo(!isPlayerOne);\n    }\n\n    // if (storedGameId) {\n    //   setGameId(storedGameId);\n    //   setIsPlayerOne(storedIsPlayerOne === \"true\");\n    //   // if (!storedPlayerId) {\n    //   //   setIsPlayerOne(false);\n    //   // }\n    //   setGameStarted(storedGameStarted === \"true\" || storedIsPlayerOne === \"true\");\n\n    // }\n\n    // if(storedGameId){\n    //   console.log(\"Requesting game state for gameId:\", storedGameId);\n\n    //   socket.emit(\"requestGameState\",{gameId:storedGameId})\n    // }\n\n    const handlePlayerResponse = res => {\n      console.log(\"response from creating player ===>\", res);\n      if (res.type === \"playerCreated\") {\n        const {\n          playerId,\n          name\n        } = res.player;\n        localStorage.setItem(\"playerId\", playerId);\n        localStorage.setItem(\"playerName\", name);\n        setPlayerId(playerId);\n        setPlayerName(name);\n        setIsPlayerTwo(false);\n      } else if (res.type === \"joinedGame\") {\n        const {\n          game,\n          playerTwo\n        } = res;\n        localStorage.setItem(\"gameId\", game.gameId);\n        localStorage.setItem(\"playerId\", playerTwo.id);\n        setGameId(game.gameId);\n        setGameStarted(true);\n        setIsPlayerTwo(true);\n        setWaitingForPlayer(false);\n        setNotificationMessage(`Joined game successfully. Your game ID: ${game.gameId}. Waiting for the game to start.`);\n      }\n    };\n    const handleGameResponse = res => {\n      console.log(\"response from creating game ===>\", res);\n      if (res.newGame) {\n        const {\n          gameId\n        } = res.newGame;\n        localStorage.setItem(\"gameId\", gameId);\n        localStorage.setItem(\"isPlayerOne\", \"true\");\n        setGameId(gameId);\n        setGameStarted(true);\n        setIsPlayerOne(true);\n        setWaitingForPlayer(true);\n      }\n    };\n    const handleGameJoinedResponse = response => {\n      console.log(\"Game join response:====>\", response);\n      if (response.type === \"gameJoined\") {\n        // Success, a player has joined the game\n        const {\n          updateGame,\n          playerTwo\n        } = response;\n        localStorage.setItem(\"gameId\", gameId);\n        setGameId(gameId);\n        setGameStarted(true);\n        setWaitingForPlayer(false);\n        setNotificationMessage(`Player ${playerTwo.name} has joined your game. The game has started!`);\n      } else if (response.type === \"error\") {\n        setErrorMessage(response.message);\n      }\n    };\n    const handleGameStateResponse = response => {\n      if (response.type === \"gameState\") {\n        const isCurrentPlayerOne = response.playerOneId === playerId;\n        const isCurrentPlayerTwo = response.playerTwoId === playerId;\n        setGameStarted(response.status !== GameStatus.Finished);\n        setIsPlayerOne(isCurrentPlayerOne);\n        setIsPlayerTwo(isCurrentPlayerTwo);\n        if (isCurrentPlayerTwo) {\n          setWaitingForPlayer(false);\n        }\n      } else if (response.type === \"error\") {}\n    };\n    const handleGameResetResponse = response => {\n      console.log(\"Game reset response:==>\", response);\n      if (response.type === \"gameReset\") {\n        setBoard(Array(9).fill(null)); // Reset the board state\n        setGameStarted(false);\n        setWaitingForPlayer(false);\n        console.log(\"Game has been reset\");\n      }\n    };\n\n    // Register socket event listeners\n    socket.on(\"playerResponse\", handlePlayerResponse);\n    socket.on(\"gameResponse\", handleGameResponse);\n    socket.on(\"gameJoinedResponse\", handleGameJoinedResponse);\n    socket.on(\"gameResetResponse\", handleGameResetResponse);\n    socket.on(\"gameStateResponse\", handleGameStateResponse);\n    socket.on(\"playerResponse\", error => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n    socket.on(\"gameResponse\", error => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n    return () => {\n      socket.off(\"playerResponse\", handlePlayerResponse);\n      socket.off(\"gameResponse\", handleGameResponse);\n      socket.off(\"gameJoinedResponse\", handleGameJoinedResponse);\n      socket.off(\"gameResetResponse\", handleGameResetResponse); // Fixed typo here\n      socket.off(\"gameStateResponse\", handleGameStateResponse);\n    };\n  }, [isPlayerOne, playerId, gameId]);\n  useEffect(() => {\n    if (isPlayerOne && !gameId) {\n      console.log(\"Player is Player One and no gameId exists, creating game...\");\n      socket.emit(\"createGame\", {\n        playerId: playerId\n      });\n    }\n  }, [isPlayerOne, gameId, playerId]);\n  useEffect(() => {\n    localStorage.setItem(\"board\", JSON.stringify(board));\n  }, [board]);\n  const makeMove = position => {\n    socket.emit(\"makeMove\", {\n      playerId,\n      gameId,\n      position\n    });\n  };\n  const handleResetGame = () => {\n    if (!gameId) {\n      console.log(\"No game to reset\");\n      return;\n    }\n    socket.emit(\"resetGame\", {\n      gameId\n    });\n    setBoard(Array(9).fill(null));\n    setGameStarted(false);\n    setWaitingForPlayer(false);\n  };\n  const logOut = () => {\n    localStorage.removeItem(\"playerId\");\n    localStorage.removeItem(\"gameId\");\n    localStorage.removeItem(\"playerName\");\n\n    // player leave game\n    socket.emit(\"leaveGame\", {\n      playerId,\n      gameId\n    });\n    setPlayerId(null);\n    setPlayerName(\"\");\n    setGameStarted(false);\n    setIsPlayerOne(false);\n    setIsPlayerTwo(false);\n    setGameId(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 24\n    }, this), showNotificationMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-message\",\n      children: showNotificationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 9\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(WelcomeModal, {\n      playerName: playerName,\n      onNameChange: handleNameChange,\n      onStart: handleStartGame,\n      gameId: gameId,\n      setGameId: handleGameIdChange,\n      isPlayerOne: isPlayerOne,\n      onJoinGame: handleJoinGameOrRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tic-Tac-Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome \", playerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this), waitingForPlayer && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Waiting for Player Two to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 32\n      }, this), gameStarted && /*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        onMakeMove: makeMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 27\n      }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Game started! Your game ID: \", gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-game-btn\",\n        onClick: handleResetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"log-out-btn\",\n        onClick: logOut,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JTd80ft4JAjThZpVN7ZPECV602k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useEffect","useState","GameBoard","WelcomeModal","GameStatus","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","path","App","_s","playerName","setPlayerName","playerId","setPlayerId","board","setBoard","Array","fill","gameId","setGameId","gameStarted","setGameStarted","waitingForPlayer","setWaitingForPlayer","errorMessage","setErrorMessage","showNotificationMessage","setNotificationMessage","isPlayerOne","setIsPlayerOne","isPlayerTwo","setIsPlayerTwo","availableGames","setAvailableGames","sessionID","setSessionID","session","sessionStorage","getItem","emit","response","valid","updateGameStateFromResponse","removeItem","handleStartGame","trim","alert","console","log","name","setItem","handleJoinGameOrRegister","undefined","handleNameChange","newName","handleGameIdChange","newGameId","storedGameId","localStorage","storedIsPlayerOne","storedGameStarted","storedPlayerId","storedPlayerName","savedBoard","JSON","parse","handlePlayerResponse","res","type","player","game","playerTwo","id","handleGameResponse","newGame","handleGameJoinedResponse","updateGame","message","handleGameStateResponse","isCurrentPlayerOne","playerOneId","isCurrentPlayerTwo","playerTwoId","status","Finished","handleGameResetResponse","on","error","off","stringify","makeMove","position","handleResetGame","logOut","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onNameChange","onStart","onJoinGame","onMakeMove","onClick","_c","$RefreshReg$"],"sources":["/Users/paulndam/Documents/Wise-Rock-Tech-Interview/tic-tac-toe/frontend/tic-tac-toe/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport { useEffect, useState } from \"react\";\nimport GameBoard from \"./components/game-board/GameBoard\";\nimport WelcomeModal from \"./components/welcomeModal/WelcomeModal\";\nimport { GameStatus } from \"./components/utils/gameStatus\";\n\nconst socket = io(\"http://localhost:8080\", {\n  path: \"/socket.io\",\n});\n\nfunction App() {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerId, setPlayerId] = useState(null);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [gameId, setGameId] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForPlayer, setWaitingForPlayer] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showNotificationMessage, setNotificationMessage] = useState(\"\");\n  const [isPlayerOne, setIsPlayerOne] = useState(false);\n  const [isPlayerTwo, setIsPlayerTwo] = useState(false);\n  const [availableGames, setAvailableGames] = useState([]);\n  const [sessionID, setSessionID] = useState(null);\n\n  useEffect(() => {\n    // Attempt to restore session on component mount\n    const session = sessionStorage.getItem(\"sessionID\");\n    if (session) {\n      socket.emit(\"validateSession\", { sessionID: session }, (response) => {\n        if (response.valid) {\n          setSessionID(session);\n          updateGameStateFromResponse(response);\n        } else {\n          sessionStorage.removeItem(\"sessionID\");\n          setSessionID(null);\n        }\n      });\n    }\n  }, []);\n\n  const updateGameStateFromResponse = (response) => {\n    // Consolidated game state update logic\n    setPlayerId(response.playerId);\n    setPlayerName(response.playerName);\n    setGameId(response.gameId);\n    setBoard(response.board);\n    setIsPlayerOne(response.isPlayerOne);\n    setGameStarted(response.gameStarted);\n    setIsPlayerTwo(response.isPlayerTwo);\n    // Additional updates as necessary...\n  };\n\n  const handleStartGame = () => {\n    if (!playerName.trim()) {\n      alert(\"Please enter a name.\");\n      return;\n    }\n    if (!playerId) {\n      setIsPlayerOne(true);\n      console.log(\"Creating Player...\");\n      // socket.emit(\"createPlayer\", { name: playerName.trim() });\n      // setWaitingForPlayer(true);\n      socket.emit(\"createPlayer\", { name: playerName.trim() }, (response) => {\n        if (response.sessionID) {\n          sessionStorage.setItem(\"sessionID\", response.sessionID);\n          setSessionID(response.sessionID);\n          updateGameStateFromResponse(response);\n          setWaitingForPlayer(true);\n        }\n        // Handle error or invalid response case...\n      });\n    }\n  };\n\n  const handleJoinGameOrRegister = () => {\n    if (!playerName.trim() || (gameId && !gameId.trim())) {\n      alert(\"Please enter a name and, if joining a game, a valid game ID.\");\n      return;\n    }\n\n    if (!playerId) {\n      console.log(\n        gameId ? \"Joining Game as Player Two...\" : \"Creating Player and Game...\"\n      );\n      // socket.emit(\"createPlayer\", {\n      //   name: playerName.trim(),\n      //   gameId: gameId || undefined,\n      // });\n      socket.emit(\n        \"createPlayer\",\n        {\n          name: playerName.trim(),\n          gameId: gameId || undefined,\n        },\n        (response) => {\n          if (response.sessionID) {\n            sessionStorage.setItem(\"sessionID\", response.sessionID);\n            setSessionID(response.sessionID);\n            updateGameStateFromResponse(response);\n          }\n          // Handle error or invalid response case...\n        }\n      );\n    }\n  };\n\n  const handleNameChange = (newName) => {\n    setPlayerName(newName);\n  };\n\n  const handleGameIdChange = (newGameId) => {\n    setGameId(newGameId);\n  };\n\n  useEffect(() => {\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\") === \"true\";\n    const storedGameStarted = localStorage.getItem(\"gameStarted\") === \"true\";\n\n    if (storedGameId) {\n      socket.emit(\"requestGameState\", { gameId: storedGameId });\n    } else {\n      setGameStarted(storedGameStarted && storedIsPlayerOne);\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   const storedPlayerId = localStorage.getItem(\"playerId\");\n  //   const storedGameId = localStorage.getItem(\"gameId\");\n\n  //   // Only set isPlayerOne or gameStarted based on explicit server validation\n  //   if (storedGameId && storedPlayerId) {\n  //     // Request current game state from the server to validate\n  //     socket.emit(\"requestGameState\", { gameId: storedGameId });\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    const session = sessionStorage.getItem(\"sessionID\");\n    if (session) {\n      setSessionID(session);\n      // Validate session with the server to restore state\n      socket.emit(\"validateSession\", { sessionID: session }, (response) => {\n        if (response.valid) {\n          // Assume response includes all necessary state information\n          setPlayerId(response.playerId);\n          setPlayerName(response.playerName);\n          setGameId(response.gameId);\n          setBoard(response.board);\n          setIsPlayerOne(response.isPlayerOne);\n          setGameStarted(response.gameStarted);\n          // handle other necessary state updates based on the response\n        } else {\n          // Handle invalid session scenario\n          sessionStorage.removeItem(\"sessionID\"); // Clear invalid session\n          setSessionID(null); // Reset session state\n          // Potentially navigate user to a start or join game screen\n        }\n      });\n    }\n  }, [socket]);\n\n  useEffect(() => {\n    const storedPlayerId = localStorage.getItem(\"playerId\");\n    const storedPlayerName = localStorage.getItem(\"playerName\");\n    const storedGameId = localStorage.getItem(\"gameId\");\n    const storedIsPlayerOne = localStorage.getItem(\"isPlayerOne\");\n    const storedGameStarted = localStorage.getItem(\"gameStarted\");\n    const savedBoard = localStorage.getItem(\"board\");\n\n    if (savedBoard) {\n      setBoard(JSON.parse(savedBoard));\n    }\n\n    if (storedPlayerId && storedPlayerName) {\n      setPlayerId(storedPlayerId);\n      setPlayerName(storedPlayerName);\n      setIsPlayerTwo(!isPlayerOne);\n    }\n\n    // if (storedGameId) {\n    //   setGameId(storedGameId);\n    //   setIsPlayerOne(storedIsPlayerOne === \"true\");\n    //   // if (!storedPlayerId) {\n    //   //   setIsPlayerOne(false);\n    //   // }\n    //   setGameStarted(storedGameStarted === \"true\" || storedIsPlayerOne === \"true\");\n\n    // }\n\n    // if(storedGameId){\n    //   console.log(\"Requesting game state for gameId:\", storedGameId);\n\n    //   socket.emit(\"requestGameState\",{gameId:storedGameId})\n    // }\n\n    const handlePlayerResponse = (res) => {\n      console.log(\"response from creating player ===>\", res);\n      if (res.type === \"playerCreated\") {\n        const { playerId, name } = res.player;\n        localStorage.setItem(\"playerId\", playerId);\n        localStorage.setItem(\"playerName\", name);\n\n        setPlayerId(playerId);\n        setPlayerName(name);\n        setIsPlayerTwo(false);\n      } else if (res.type === \"joinedGame\") {\n        const { game, playerTwo } = res;\n        localStorage.setItem(\"gameId\", game.gameId);\n        localStorage.setItem(\"playerId\", playerTwo.id);\n        setGameId(game.gameId);\n        setGameStarted(true);\n        setIsPlayerTwo(true);\n        setWaitingForPlayer(false);\n        setNotificationMessage(\n          `Joined game successfully. Your game ID: ${game.gameId}. Waiting for the game to start.`\n        );\n      }\n    };\n\n    const handleGameResponse = (res) => {\n      console.log(\"response from creating game ===>\", res);\n      if (res.newGame) {\n        const { gameId } = res.newGame;\n        localStorage.setItem(\"gameId\", gameId);\n        localStorage.setItem(\"isPlayerOne\", \"true\");\n        setGameId(gameId);\n        setGameStarted(true);\n        setIsPlayerOne(true);\n        setWaitingForPlayer(true);\n      }\n    };\n\n    const handleGameJoinedResponse = (response) => {\n      console.log(\"Game join response:====>\", response);\n      if (response.type === \"gameJoined\") {\n        // Success, a player has joined the game\n        const { updateGame, playerTwo } = response;\n        localStorage.setItem(\"gameId\", gameId);\n        setGameId(gameId);\n        setGameStarted(true);\n        setWaitingForPlayer(false);\n        setNotificationMessage(\n          `Player ${playerTwo.name} has joined your game. The game has started!`\n        );\n      } else if (response.type === \"error\") {\n        setErrorMessage(response.message);\n      }\n    };\n\n    const handleGameStateResponse = (response) => {\n      if (response.type === \"gameState\") {\n        const isCurrentPlayerOne = response.playerOneId === playerId;\n        const isCurrentPlayerTwo = response.playerTwoId === playerId;\n\n        setGameStarted(response.status !== GameStatus.Finished);\n        setIsPlayerOne(isCurrentPlayerOne);\n        setIsPlayerTwo(isCurrentPlayerTwo);\n\n        if (isCurrentPlayerTwo) {\n          setWaitingForPlayer(false);\n        }\n      } else if (response.type === \"error\") {\n      }\n    };\n\n    const handleGameResetResponse = (response) => {\n      console.log(\"Game reset response:==>\", response);\n      if (response.type === \"gameReset\") {\n        setBoard(Array(9).fill(null)); // Reset the board state\n        setGameStarted(false);\n        setWaitingForPlayer(false);\n        console.log(\"Game has been reset\");\n      }\n    };\n\n    // Register socket event listeners\n    socket.on(\"playerResponse\", handlePlayerResponse);\n    socket.on(\"gameResponse\", handleGameResponse);\n    socket.on(\"gameJoinedResponse\", handleGameJoinedResponse);\n    socket.on(\"gameResetResponse\", handleGameResetResponse);\n    socket.on(\"gameStateResponse\", handleGameStateResponse);\n\n    socket.on(\"playerResponse\", (error) => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n\n    socket.on(\"gameResponse\", (error) => {\n      if (error.type === \"error\") {\n        setErrorMessage(error.message);\n      }\n    });\n\n    return () => {\n      socket.off(\"playerResponse\", handlePlayerResponse);\n      socket.off(\"gameResponse\", handleGameResponse);\n      socket.off(\"gameJoinedResponse\", handleGameJoinedResponse);\n      socket.off(\"gameResetResponse\", handleGameResetResponse); // Fixed typo here\n      socket.off(\"gameStateResponse\", handleGameStateResponse);\n    };\n  }, [isPlayerOne, playerId, gameId]);\n\n  useEffect(() => {\n    if (isPlayerOne && !gameId) {\n      console.log(\n        \"Player is Player One and no gameId exists, creating game...\"\n      );\n      socket.emit(\"createGame\", { playerId: playerId });\n    }\n  }, [isPlayerOne, gameId, playerId]);\n\n  useEffect(() => {\n    localStorage.setItem(\"board\", JSON.stringify(board));\n  }, [board]);\n\n  const makeMove = (position) => {\n    socket.emit(\"makeMove\", { playerId, gameId, position });\n  };\n\n  const handleResetGame = () => {\n    if (!gameId) {\n      console.log(\"No game to reset\");\n      return;\n    }\n    socket.emit(\"resetGame\", { gameId });\n\n    setBoard(Array(9).fill(null));\n    setGameStarted(false);\n    setWaitingForPlayer(false);\n  };\n\n  const logOut = () => {\n    localStorage.removeItem(\"playerId\");\n    localStorage.removeItem(\"gameId\");\n    localStorage.removeItem(\"playerName\");\n\n    // player leave game\n    socket.emit(\"leaveGame\", { playerId, gameId });\n\n    setPlayerId(null);\n    setPlayerName(\"\");\n    setGameStarted(false);\n    setIsPlayerOne(false);\n    setIsPlayerTwo(false);\n    setGameId(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n      {showNotificationMessage && (\n        <div className=\"notification-message\">{showNotificationMessage}</div>\n      )}\n\n      {!gameStarted ? (\n        <WelcomeModal\n          playerName={playerName}\n          onNameChange={handleNameChange}\n          onStart={handleStartGame}\n          gameId={gameId}\n          setGameId={handleGameIdChange}\n          isPlayerOne={isPlayerOne}\n          onJoinGame={handleJoinGameOrRegister}\n        />\n      ) : (\n        <>\n          <div className=\"header\">\n            <h1>Tic-Tac-Toe</h1>\n            <h2>Welcome {playerName}</h2>\n          </div>\n\n          {waitingForPlayer && <div>Waiting for Player Two to join...</div>}\n          {gameStarted && <GameBoard board={board} onMakeMove={makeMove} />}\n          {gameStarted && <div>Game started! Your game ID: {gameId}</div>}\n          <button className=\"reset-game-btn\" onClick={handleResetGame}>\n            Reset Game\n          </button>\n\n          <button className=\"log-out-btn\" onClick={logOut}>\n            Log Out\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}